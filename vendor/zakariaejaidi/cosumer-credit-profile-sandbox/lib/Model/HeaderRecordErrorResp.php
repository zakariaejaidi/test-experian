<?php
/**
 * HeaderRecordErrorResp
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Credit Profile
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: OpenAPI3.2.0.52
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HeaderRecordErrorResp Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HeaderRecordErrorResp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'headerRecordErrorResp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hostid' => 'string',
        'application_id' => 'string',
        'report_date' => 'string',
        'report_time' => 'string',
        'report_type' => 'string',
        'preamble' => 'string',
        'region_code' => 'string',
        'version_no' => 'string',
        'sur_name' => 'string',
        'first_name' => 'string',
        'm_keyword_length' => 'string',
        'm_keyword_text' => 'string',
        'y2k_reported_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'hostid' => null,
        'application_id' => null,
        'report_date' => null,
        'report_time' => null,
        'report_type' => null,
        'preamble' => null,
        'region_code' => null,
        'version_no' => null,
        'sur_name' => null,
        'first_name' => null,
        'm_keyword_length' => null,
        'm_keyword_text' => null,
        'y2k_reported_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hostid' => 'hostid',
        'application_id' => 'applicationId',
        'report_date' => 'reportDate',
        'report_time' => 'reportTime',
        'report_type' => 'reportType',
        'preamble' => 'preamble',
        'region_code' => 'regionCode',
        'version_no' => 'versionNo',
        'sur_name' => 'surName',
        'first_name' => 'firstName',
        'm_keyword_length' => 'mKeywordLength',
        'm_keyword_text' => 'mKeywordText',
        'y2k_reported_date' => 'y2kReportedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hostid' => 'setHostid',
        'application_id' => 'setApplicationId',
        'report_date' => 'setReportDate',
        'report_time' => 'setReportTime',
        'report_type' => 'setReportType',
        'preamble' => 'setPreamble',
        'region_code' => 'setRegionCode',
        'version_no' => 'setVersionNo',
        'sur_name' => 'setSurName',
        'first_name' => 'setFirstName',
        'm_keyword_length' => 'setMKeywordLength',
        'm_keyword_text' => 'setMKeywordText',
        'y2k_reported_date' => 'setY2kReportedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hostid' => 'getHostid',
        'application_id' => 'getApplicationId',
        'report_date' => 'getReportDate',
        'report_time' => 'getReportTime',
        'report_type' => 'getReportType',
        'preamble' => 'getPreamble',
        'region_code' => 'getRegionCode',
        'version_no' => 'getVersionNo',
        'sur_name' => 'getSurName',
        'first_name' => 'getFirstName',
        'm_keyword_length' => 'getMKeywordLength',
        'm_keyword_text' => 'getMKeywordText',
        'y2k_reported_date' => 'getY2kReportedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hostid'] = isset($data['hostid']) ? $data['hostid'] : null;
        $this->container['application_id'] = isset($data['application_id']) ? $data['application_id'] : null;
        $this->container['report_date'] = isset($data['report_date']) ? $data['report_date'] : null;
        $this->container['report_time'] = isset($data['report_time']) ? $data['report_time'] : null;
        $this->container['report_type'] = isset($data['report_type']) ? $data['report_type'] : null;
        $this->container['preamble'] = isset($data['preamble']) ? $data['preamble'] : null;
        $this->container['region_code'] = isset($data['region_code']) ? $data['region_code'] : null;
        $this->container['version_no'] = isset($data['version_no']) ? $data['version_no'] : null;
        $this->container['sur_name'] = isset($data['sur_name']) ? $data['sur_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['m_keyword_length'] = isset($data['m_keyword_length']) ? $data['m_keyword_length'] : null;
        $this->container['m_keyword_text'] = isset($data['m_keyword_text']) ? $data['m_keyword_text'] : null;
        $this->container['y2k_reported_date'] = isset($data['y2k_reported_date']) ? $data['y2k_reported_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hostid
     *
     * @return string|null
     */
    public function getHostid()
    {
        return $this->container['hostid'];
    }

    /**
     * Sets hostid
     *
     * @param string|null $hostid Denotes which Experian host responded to inquiry.
     *
     * @return $this
     */
    public function setHostid($hostid)
    {
        $this->container['hostid'] = $hostid;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string|null
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string|null $application_id C = Credit Reporting D = Detect N = NFD
     *
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets report_date
     *
     * @return string|null
     */
    public function getReportDate()
    {
        return $this->container['report_date'];
    }

    /**
     * Sets report_date
     *
     * @param string|null $report_date Date inquiry reported to Experian. Format = MMDDYY
     *
     * @return $this
     */
    public function setReportDate($report_date)
    {
        $this->container['report_date'] = $report_date;

        return $this;
    }

    /**
     * Gets report_time
     *
     * @return string|null
     */
    public function getReportTime()
    {
        return $this->container['report_time'];
    }

    /**
     * Sets report_time
     *
     * @param string|null $report_time Time inquiry reported to Experian. Format = HHMMSS
     *
     * @return $this
     */
    public function setReportTime($report_time)
    {
        $this->container['report_time'] = $report_time;

        return $this;
    }

    /**
     * Gets report_type
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param string|null $report_type X = ARF Format
     *
     * @return $this
     */
    public function setReportType($report_type)
    {
        $this->container['report_type'] = $report_type;

        return $this;
    }

    /**
     * Gets preamble
     *
     * @return string|null
     */
    public function getPreamble()
    {
        return $this->container['preamble'];
    }

    /**
     * Sets preamble
     *
     * @param string|null $preamble Consumer Assistance Preamble for area accessed.
     *
     * @return $this
     */
    public function setPreamble($preamble)
    {
        $this->container['preamble'] = $preamble;

        return $this;
    }

    /**
     * Gets region_code
     *
     * @return string|null
     */
    public function getRegionCode()
    {
        return $this->container['region_code'];
    }

    /**
     * Sets region_code
     *
     * @param string|null $region_code Constant 'W'
     *
     * @return $this
     */
    public function setRegionCode($region_code)
    {
        $this->container['region_code'] = $region_code;

        return $this;
    }

    /**
     * Gets version_no
     *
     * @return string|null
     */
    public function getVersionNo()
    {
        return $this->container['version_no'];
    }

    /**
     * Sets version_no
     *
     * @param string|null $version_no Experian online ARF version
     *
     * @return $this
     */
    public function setVersionNo($version_no)
    {
        $this->container['version_no'] = $version_no;

        return $this;
    }

    /**
     * Gets sur_name
     *
     * @return string|null
     */
    public function getSurName()
    {
        return $this->container['sur_name'];
    }

    /**
     * Sets sur_name
     *
     * @param string|null $sur_name Left justified. Unused spaces are blank or nullfilled.
     *
     * @return $this
     */
    public function setSurName($sur_name)
    {
        $this->container['sur_name'] = $sur_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Left justified. First three characters only.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets m_keyword_length
     *
     * @return string|null
     */
    public function getMKeywordLength()
    {
        return $this->container['m_keyword_length'];
    }

    /**
     * Sets m_keyword_length
     *
     * @param string|null $m_keyword_length Indicates length of text.
     *
     * @return $this
     */
    public function setMKeywordLength($m_keyword_length)
    {
        $this->container['m_keyword_length'] = $m_keyword_length;

        return $this;
    }

    /**
     * Gets m_keyword_text
     *
     * @return string|null
     */
    public function getMKeywordText()
    {
        return $this->container['m_keyword_text'];
    }

    /**
     * Sets m_keyword_text
     *
     * @param string|null $m_keyword_text Information obtained from the M-keyword used on Inquiry. The data is returned in the same format as input.  It is used as a control number for subscribers to link this response to their inquiry.
     *
     * @return $this
     */
    public function setMKeywordText($m_keyword_text)
    {
        $this->container['m_keyword_text'] = $m_keyword_text;

        return $this;
    }

    /**
     * Gets y2k_reported_date
     *
     * @return string|null
     */
    public function getY2kReportedDate()
    {
        return $this->container['y2k_reported_date'];
    }

    /**
     * Sets y2k_reported_date
     *
     * @param string|null $y2k_reported_date Date of report. Format = MMDDCCYY
     *
     * @return $this
     */
    public function setY2kReportedDate($y2k_reported_date)
    {
        $this->container['y2k_reported_date'] = $y2k_reported_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


