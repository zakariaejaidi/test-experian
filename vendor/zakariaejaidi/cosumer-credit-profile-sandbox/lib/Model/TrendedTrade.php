<?php
/**
 * TrendedTrade
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Credit Profile
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: OpenAPI3.2.0.52
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TrendedTrade Class Doc Comment
 *
 * @category Class
 * @description Trended Data
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrendedTrade implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'trendedTrade';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'month_number' => 'string',
        'balance_amount' => 'string',
        'original_loan_amount_or_limit' => 'string',
        'scheduled_payment_amount' => 'string',
        'actual_payment_amount' => 'string',
        'last_payment_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'month_number' => null,
        'balance_amount' => null,
        'original_loan_amount_or_limit' => null,
        'scheduled_payment_amount' => null,
        'actual_payment_amount' => null,
        'last_payment_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'month_number' => 'monthNumber',
        'balance_amount' => 'balanceAmount',
        'original_loan_amount_or_limit' => 'originalLoanAmountOrLimit',
        'scheduled_payment_amount' => 'scheduledPaymentAmount',
        'actual_payment_amount' => 'actualPaymentAmount',
        'last_payment_date' => 'lastPaymentDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'month_number' => 'setMonthNumber',
        'balance_amount' => 'setBalanceAmount',
        'original_loan_amount_or_limit' => 'setOriginalLoanAmountOrLimit',
        'scheduled_payment_amount' => 'setScheduledPaymentAmount',
        'actual_payment_amount' => 'setActualPaymentAmount',
        'last_payment_date' => 'setLastPaymentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'month_number' => 'getMonthNumber',
        'balance_amount' => 'getBalanceAmount',
        'original_loan_amount_or_limit' => 'getOriginalLoanAmountOrLimit',
        'scheduled_payment_amount' => 'getScheduledPaymentAmount',
        'actual_payment_amount' => 'getActualPaymentAmount',
        'last_payment_date' => 'getLastPaymentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['month_number'] = isset($data['month_number']) ? $data['month_number'] : null;
        $this->container['balance_amount'] = isset($data['balance_amount']) ? $data['balance_amount'] : null;
        $this->container['original_loan_amount_or_limit'] = isset($data['original_loan_amount_or_limit']) ? $data['original_loan_amount_or_limit'] : null;
        $this->container['scheduled_payment_amount'] = isset($data['scheduled_payment_amount']) ? $data['scheduled_payment_amount'] : null;
        $this->container['actual_payment_amount'] = isset($data['actual_payment_amount']) ? $data['actual_payment_amount'] : null;
        $this->container['last_payment_date'] = isset($data['last_payment_date']) ? $data['last_payment_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets month_number
     *
     * @return string|null
     */
    public function getMonthNumber()
    {
        return $this->container['month_number'];
    }

    /**
     * Sets month_number
     *
     * @param string|null $month_number The month for which this data applies. For example 0 means it is for the inquiry month, 1 means it is for the a month before the inquiry month and so on.
     *
     * @return $this
     */
    public function setMonthNumber($month_number)
    {
        $this->container['month_number'] = $month_number;

        return $this;
    }

    /**
     * Gets balance_amount
     *
     * @return string|null
     */
    public function getBalanceAmount()
    {
        return $this->container['balance_amount'];
    }

    /**
     * Sets balance_amount
     *
     * @param string|null $balance_amount Balance Amount
     *
     * @return $this
     */
    public function setBalanceAmount($balance_amount)
    {
        $this->container['balance_amount'] = $balance_amount;

        return $this;
    }

    /**
     * Gets original_loan_amount_or_limit
     *
     * @return string|null
     */
    public function getOriginalLoanAmountOrLimit()
    {
        return $this->container['original_loan_amount_or_limit'];
    }

    /**
     * Sets original_loan_amount_or_limit
     *
     * @param string|null $original_loan_amount_or_limit Original Loan Amount or Limit
     *
     * @return $this
     */
    public function setOriginalLoanAmountOrLimit($original_loan_amount_or_limit)
    {
        $this->container['original_loan_amount_or_limit'] = $original_loan_amount_or_limit;

        return $this;
    }

    /**
     * Gets scheduled_payment_amount
     *
     * @return string|null
     */
    public function getScheduledPaymentAmount()
    {
        return $this->container['scheduled_payment_amount'];
    }

    /**
     * Sets scheduled_payment_amount
     *
     * @param string|null $scheduled_payment_amount Scheduled Payment Amount
     *
     * @return $this
     */
    public function setScheduledPaymentAmount($scheduled_payment_amount)
    {
        $this->container['scheduled_payment_amount'] = $scheduled_payment_amount;

        return $this;
    }

    /**
     * Gets actual_payment_amount
     *
     * @return string|null
     */
    public function getActualPaymentAmount()
    {
        return $this->container['actual_payment_amount'];
    }

    /**
     * Sets actual_payment_amount
     *
     * @param string|null $actual_payment_amount Actual Payment Amount
     *
     * @return $this
     */
    public function setActualPaymentAmount($actual_payment_amount)
    {
        $this->container['actual_payment_amount'] = $actual_payment_amount;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return string|null
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param string|null $last_payment_date Last Payment Date
     *
     * @return $this
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


