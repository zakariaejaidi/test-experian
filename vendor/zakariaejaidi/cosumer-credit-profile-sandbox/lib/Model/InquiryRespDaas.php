<?php
/**
 * InquiryRespDaas
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Credit Profile
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: OpenAPI3.2.0.52
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InquiryRespDaas Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InquiryRespDaas implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inquiryRespDaas';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'string',
        'date' => 'string',
        'kob' => 'string',
        'kob_text' => 'string',
        'subscriber_code' => 'string',
        'subscriber_name' => 'string',
        'terms' => 'string',
        'terms_text' => 'string',
        'type' => 'string',
        'type_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'date' => null,
        'kob' => null,
        'kob_text' => null,
        'subscriber_code' => null,
        'subscriber_name' => null,
        'terms' => null,
        'terms_text' => null,
        'type' => null,
        'type_text' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'date' => 'date',
        'kob' => 'kob',
        'kob_text' => 'kobText',
        'subscriber_code' => 'subscriberCode',
        'subscriber_name' => 'subscriberName',
        'terms' => 'terms',
        'terms_text' => 'termsText',
        'type' => 'type',
        'type_text' => 'typeText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'date' => 'setDate',
        'kob' => 'setKob',
        'kob_text' => 'setKobText',
        'subscriber_code' => 'setSubscriberCode',
        'subscriber_name' => 'setSubscriberName',
        'terms' => 'setTerms',
        'terms_text' => 'setTermsText',
        'type' => 'setType',
        'type_text' => 'setTypeText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'date' => 'getDate',
        'kob' => 'getKob',
        'kob_text' => 'getKobText',
        'subscriber_code' => 'getSubscriberCode',
        'subscriber_name' => 'getSubscriberName',
        'terms' => 'getTerms',
        'terms_text' => 'getTermsText',
        'type' => 'getType',
        'type_text' => 'getTypeText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['kob'] = isset($data['kob']) ? $data['kob'] : null;
        $this->container['kob_text'] = isset($data['kob_text']) ? $data['kob_text'] : null;
        $this->container['subscriber_code'] = isset($data['subscriber_code']) ? $data['subscriber_code'] : null;
        $this->container['subscriber_name'] = isset($data['subscriber_name']) ? $data['subscriber_name'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['terms_text'] = isset($data['terms_text']) ? $data['terms_text'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['type_text'] = isset($data['type_text']) ? $data['type_text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount Full dollar amount.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Date of inquiry. MMDDCCYY
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets kob
     *
     * @return string|null
     */
    public function getKob()
    {
        return $this->container['kob'];
    }

    /**
     * Sets kob
     *
     * @param string|null $kob Kind of Business Codes.
     *
     * @return $this
     */
    public function setKob($kob)
    {
        $this->container['kob'] = $kob;

        return $this;
    }

    /**
     * Gets kob_text
     *
     * @return string|null
     */
    public function getKobText()
    {
        return $this->container['kob_text'];
    }

    /**
     * Sets kob_text
     *
     * @param string|null $kob_text Verbose mapping for kob
     *
     * @return $this
     */
    public function setKobText($kob_text)
    {
        $this->container['kob_text'] = $kob_text;

        return $this;
    }

    /**
     * Gets subscriber_code
     *
     * @return string|null
     */
    public function getSubscriberCode()
    {
        return $this->container['subscriber_code'];
    }

    /**
     * Sets subscriber_code
     *
     * @param string|null $subscriber_code Subscriber Code of inquiring creditor.
     *
     * @return $this
     */
    public function setSubscriberCode($subscriber_code)
    {
        $this->container['subscriber_code'] = $subscriber_code;

        return $this;
    }

    /**
     * Gets subscriber_name
     *
     * @return string|null
     */
    public function getSubscriberName()
    {
        return $this->container['subscriber_name'];
    }

    /**
     * Sets subscriber_name
     *
     * @param string|null $subscriber_name Subscriber Name of inquirying creditor.
     *
     * @return $this
     */
    public function setSubscriberName($subscriber_name)
    {
        $this->container['subscriber_name'] = $subscriber_name;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return string|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param string|null $terms Terms Reported.
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets terms_text
     *
     * @return string|null
     */
    public function getTermsText()
    {
        return $this->container['terms_text'];
    }

    /**
     * Sets terms_text
     *
     * @param string|null $terms_text Verbose mapping for terms
     *
     * @return $this
     */
    public function setTermsText($terms_text)
    {
        $this->container['terms_text'] = $terms_text;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Permissible Purpose Reason for the inquiry.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_text
     *
     * @return string|null
     */
    public function getTypeText()
    {
        return $this->container['type_text'];
    }

    /**
     * Sets type_text
     *
     * @param string|null $type_text Verbose mapping for type
     *
     * @return $this
     */
    public function setTypeText($type_text)
    {
        $this->container['type_text'] = $type_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


