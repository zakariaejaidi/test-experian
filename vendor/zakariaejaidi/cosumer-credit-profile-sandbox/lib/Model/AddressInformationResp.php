<?php
/**
 * AddressInformationResp
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Credit Profile
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: OpenAPI3.2.0.52
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AddressInformationResp Class Doc Comment
 *
 * @category Class
 * @description Best Consumer Addresses
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AddressInformationResp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'addressInformationResp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'census_geo_code' => 'string',
        'city' => 'string',
        'county_code' => 'string',
        'dwelling_type' => 'string',
        'first_reported_date' => 'string',
        'last_reporting_subscriber_code' => 'string',
        'last_updated_date' => 'string',
        'msa_code' => 'string',
        'source' => 'string',
        'state' => 'string',
        'state_code' => 'string',
        'street_name' => 'string',
        'street_prefix' => 'string',
        'street_suffix' => 'string',
        'times_reported' => 'string',
        'unit_id' => 'string',
        'unit_type' => 'string',
        'zip_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'census_geo_code' => null,
        'city' => null,
        'county_code' => null,
        'dwelling_type' => null,
        'first_reported_date' => null,
        'last_reporting_subscriber_code' => null,
        'last_updated_date' => null,
        'msa_code' => null,
        'source' => null,
        'state' => null,
        'state_code' => null,
        'street_name' => null,
        'street_prefix' => null,
        'street_suffix' => null,
        'times_reported' => null,
        'unit_id' => null,
        'unit_type' => null,
        'zip_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'census_geo_code' => 'censusGeoCode',
        'city' => 'city',
        'county_code' => 'countyCode',
        'dwelling_type' => 'dwellingType',
        'first_reported_date' => 'firstReportedDate',
        'last_reporting_subscriber_code' => 'lastReportingSubscriberCode',
        'last_updated_date' => 'lastUpdatedDate',
        'msa_code' => 'msaCode',
        'source' => 'source',
        'state' => 'state',
        'state_code' => 'stateCode',
        'street_name' => 'streetName',
        'street_prefix' => 'streetPrefix',
        'street_suffix' => 'streetSuffix',
        'times_reported' => 'timesReported',
        'unit_id' => 'unitId',
        'unit_type' => 'unitType',
        'zip_code' => 'zipCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'census_geo_code' => 'setCensusGeoCode',
        'city' => 'setCity',
        'county_code' => 'setCountyCode',
        'dwelling_type' => 'setDwellingType',
        'first_reported_date' => 'setFirstReportedDate',
        'last_reporting_subscriber_code' => 'setLastReportingSubscriberCode',
        'last_updated_date' => 'setLastUpdatedDate',
        'msa_code' => 'setMsaCode',
        'source' => 'setSource',
        'state' => 'setState',
        'state_code' => 'setStateCode',
        'street_name' => 'setStreetName',
        'street_prefix' => 'setStreetPrefix',
        'street_suffix' => 'setStreetSuffix',
        'times_reported' => 'setTimesReported',
        'unit_id' => 'setUnitId',
        'unit_type' => 'setUnitType',
        'zip_code' => 'setZipCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'census_geo_code' => 'getCensusGeoCode',
        'city' => 'getCity',
        'county_code' => 'getCountyCode',
        'dwelling_type' => 'getDwellingType',
        'first_reported_date' => 'getFirstReportedDate',
        'last_reporting_subscriber_code' => 'getLastReportingSubscriberCode',
        'last_updated_date' => 'getLastUpdatedDate',
        'msa_code' => 'getMsaCode',
        'source' => 'getSource',
        'state' => 'getState',
        'state_code' => 'getStateCode',
        'street_name' => 'getStreetName',
        'street_prefix' => 'getStreetPrefix',
        'street_suffix' => 'getStreetSuffix',
        'times_reported' => 'getTimesReported',
        'unit_id' => 'getUnitId',
        'unit_type' => 'getUnitType',
        'zip_code' => 'getZipCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['census_geo_code'] = isset($data['census_geo_code']) ? $data['census_geo_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['county_code'] = isset($data['county_code']) ? $data['county_code'] : null;
        $this->container['dwelling_type'] = isset($data['dwelling_type']) ? $data['dwelling_type'] : null;
        $this->container['first_reported_date'] = isset($data['first_reported_date']) ? $data['first_reported_date'] : null;
        $this->container['last_reporting_subscriber_code'] = isset($data['last_reporting_subscriber_code']) ? $data['last_reporting_subscriber_code'] : null;
        $this->container['last_updated_date'] = isset($data['last_updated_date']) ? $data['last_updated_date'] : null;
        $this->container['msa_code'] = isset($data['msa_code']) ? $data['msa_code'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['state_code'] = isset($data['state_code']) ? $data['state_code'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['street_prefix'] = isset($data['street_prefix']) ? $data['street_prefix'] : null;
        $this->container['street_suffix'] = isset($data['street_suffix']) ? $data['street_suffix'] : null;
        $this->container['times_reported'] = isset($data['times_reported']) ? $data['times_reported'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['unit_type'] = isset($data['unit_type']) ? $data['unit_type'] : null;
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets census_geo_code
     *
     * @return string|null
     */
    public function getCensusGeoCode()
    {
        return $this->container['census_geo_code'];
    }

    /**
     * Sets census_geo_code
     *
     * @param string|null $census_geo_code Address range that includes the address and the census geography the address is within
     *
     * @return $this
     */
    public function setCensusGeoCode($census_geo_code)
    {
        $this->container['census_geo_code'] = $census_geo_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City for the address.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets county_code
     *
     * @return string|null
     */
    public function getCountyCode()
    {
        return $this->container['county_code'];
    }

    /**
     * Sets county_code
     *
     * @param string|null $county_code County Code
     *
     * @return $this
     */
    public function setCountyCode($county_code)
    {
        $this->container['county_code'] = $county_code;

        return $this;
    }

    /**
     * Gets dwelling_type
     *
     * @return string|null
     */
    public function getDwellingType()
    {
        return $this->container['dwelling_type'];
    }

    /**
     * Sets dwelling_type
     *
     * @param string|null $dwelling_type Structural Characteristic/Dwelling Configuration
     *
     * @return $this
     */
    public function setDwellingType($dwelling_type)
    {
        $this->container['dwelling_type'] = $dwelling_type;

        return $this;
    }

    /**
     * Gets first_reported_date
     *
     * @return string|null
     */
    public function getFirstReportedDate()
    {
        return $this->container['first_reported_date'];
    }

    /**
     * Sets first_reported_date
     *
     * @param string|null $first_reported_date Date address first reported. Format = MMDDCCYY
     *
     * @return $this
     */
    public function setFirstReportedDate($first_reported_date)
    {
        $this->container['first_reported_date'] = $first_reported_date;

        return $this;
    }

    /**
     * Gets last_reporting_subscriber_code
     *
     * @return string|null
     */
    public function getLastReportingSubscriberCode()
    {
        return $this->container['last_reporting_subscriber_code'];
    }

    /**
     * Sets last_reporting_subscriber_code
     *
     * @param string|null $last_reporting_subscriber_code Last Subscriber reporting this address. May be blanks.
     *
     * @return $this
     */
    public function setLastReportingSubscriberCode($last_reporting_subscriber_code)
    {
        $this->container['last_reporting_subscriber_code'] = $last_reporting_subscriber_code;

        return $this;
    }

    /**
     * Gets last_updated_date
     *
     * @return string|null
     */
    public function getLastUpdatedDate()
    {
        return $this->container['last_updated_date'];
    }

    /**
     * Sets last_updated_date
     *
     * @param string|null $last_updated_date Date address last updated. Format = MMDDCCYY
     *
     * @return $this
     */
    public function setLastUpdatedDate($last_updated_date)
    {
        $this->container['last_updated_date'] = $last_updated_date;

        return $this;
    }

    /**
     * Gets msa_code
     *
     * @return string|null
     */
    public function getMsaCode()
    {
        return $this->container['msa_code'];
    }

    /**
     * Sets msa_code
     *
     * @param string|null $msa_code Metropolitan Statistical Area Code when DemographicsAll or DemographicsGeoCode is requested.
     *
     * @return $this
     */
    public function setMsaCode($msa_code)
    {
        $this->container['msa_code'] = $msa_code;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Source of Address
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Valid two-letter US state code or Canadian province.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_code
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     *
     * @param string|null $state_code State Geo Code when demographics = 1 or 2.
     *
     * @return $this
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name Full street name.
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_prefix
     *
     * @return string|null
     */
    public function getStreetPrefix()
    {
        return $this->container['street_prefix'];
    }

    /**
     * Sets street_prefix
     *
     * @param string|null $street_prefix Data that precedes the street name like house number and directional.
     *
     * @return $this
     */
    public function setStreetPrefix($street_prefix)
    {
        $this->container['street_prefix'] = $street_prefix;

        return $this;
    }

    /**
     * Gets street_suffix
     *
     * @return string|null
     */
    public function getStreetSuffix()
    {
        return $this->container['street_suffix'];
    }

    /**
     * Sets street_suffix
     *
     * @param string|null $street_suffix Street name type like ST, LN.
     *
     * @return $this
     */
    public function setStreetSuffix($street_suffix)
    {
        $this->container['street_suffix'] = $street_suffix;

        return $this;
    }

    /**
     * Gets times_reported
     *
     * @return string|null
     */
    public function getTimesReported()
    {
        return $this->container['times_reported'];
    }

    /**
     * Sets times_reported
     *
     * @param string|null $times_reported Number of times the Address was reported to Experian.
     *
     * @return $this
     */
    public function setTimesReported($times_reported)
    {
        $this->container['times_reported'] = $times_reported;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string|null $unit_id Unit Identifier for Apartment.
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type Words such as apartment, suite, etc.
     *
     * @return $this
     */
    public function setUnitType($unit_type)
    {
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code ZIP Code.
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


